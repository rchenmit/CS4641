-supervised y = f(x); given f, find x;
	ex. 1^2 = 1, 2^2 = 4,x = 10, x^2 = 100

-unsupervised f(x); given x, find f

-reinforcement: come up with a set of actions you can actually take
	a = f(x) ; T, R, A (information about the world)
	you are NOT given a or f, you are given s, T, R, A and you have to find a, 
	and f, which MAP s, T, R, A (the world) into a set of functions


Priority of commands (for a system):
-urgency
-dependency
-where you can do them (ie. you never text when you drive)
-granularity; --> some data structures complicated, some work better in some situations

Example:
Tesla driving
-routes
-things that can help guide you: 
acceleromter, GPS, 

Ex. Looking at prof's desktop:
you can tell: what programming langs he uses, what he uses to check email, his schedule
-you can tell everything that the prof does, and start building a model that predicts everything he does
-"i mihgt not know what Klaus 1443 is, but theres a thing on my calendar that says 'Klaus 1443', and i know that i generally am in Klaus on T/R at 1pm, so i can learn that i'm teaching Klaus 1443 on T/R at 1pm"
--you can look pattern of usage in CCB vs Klaus

---Final Example - of a game ------
Task: 
Performance:
Experience: